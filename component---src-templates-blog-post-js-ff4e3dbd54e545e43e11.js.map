{"version":3,"file":"component---src-templates-blog-post-js-ff4e3dbd54e545e43e11.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./i18n.js","webpack://gatsby-starter-blog/./content/assets/profile-pic.jpg","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/translation.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["exports.supportedLanguages = {\n  en: 'English',\n  'zh-hans': '简体中文',\n};\n","export default __webpack_public_path__ + \"static/profile-pic-55a2d32cdfdd9bece5c55a32e5560748.jpg\";","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport avatar from \"../../content/assets/profile-pic.jpg\"\n\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <img\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n          width: rhythm(2),\n          height: rhythm(2),\n        }}\n        src={avatar}\n      />\n      <p style={{ whiteSpace: \"pre-wrap\" }}>\n        Personal blog by{\" \"}\n        <a href={`https://twitter.com/${social.twitter}`}>{author}</a>.{\"\\n\"}\n        Kiss the demons out of my dreams.\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { supportedLanguages } from \"../../i18n\"\n\nconst Panel = ({ children, style = {} }) => {\n  return (\n    <p\n      style={{\n        fontSize: \"0.9em\",\n        border: \"1px solid var(--hr)\",\n        borderRadius: \"0.75em\",\n        padding: \"0.75em\",\n        background: \"var(--inlineCode-bg)\",\n        wordBreak: \"keep-all\",\n        ...style,\n      }}\n    >\n      {children}\n    </p>\n  )\n}\n\nconst codeToLanguage = l => {\n  return supportedLanguages[l]\n}\n\nconst matchPath = /\\/(\\w|-)+|-+/g\n\nconst Translation = ({ translations, location }) => {\n  if (!translations) {\n    const [lang, origin] = location.pathname.match(matchPath)\n    return (\n      <div className=\"translations\">\n        <Panel>\n          <Link to={origin}>Read the original</Link>\n          {\" • \"}\n          <Link to={lang}>View all translated posts</Link>\n        </Panel>\n      </div>\n    )\n  }\n\n  if (!translations.length) {\n    return null\n  }\n\n  return (\n    <div className=\"translations\">\n      <Panel>\n        <span>Translated into: </span>\n        <>\n          {translations.map(l => {\n            return (\n              <Link key={l} to={`/${l}/${location.pathname}`}>\n                {codeToLanguage(l)}\n              </Link>\n            )\n          })}\n        </>\n      </Panel>\n    </div>\n  )\n}\n\nexport default Translation\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Translation from \"../components/translation\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next, translations, langKey } = pageContext\n  console.log(langKey)\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        lang={langKey}\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <header>\n          <h1\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0,\n              color: \"var(--textTitle)\",\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n          <Translation location={location} translations={translations} />\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n      fields {\n        slug\n        langKey\n      }\n    }\n  }\n`\n"],"names":["exports","en","useStaticQuery","site","siteMetadata","author","social","style","display","marginBottom","rhythm","alt","marginRight","minWidth","borderRadius","width","height","src","avatar","whiteSpace","href","twitter","Panel","children","fontSize","border","padding","background","wordBreak","matchPath","translations","location","pathname","match","lang","origin","className","Link","to","length","map","l","key","supportedLanguages","codeToLanguage","data","pageContext","post","markdownRemark","siteTitle","title","previous","next","langKey","console","log","frontmatter","description","excerpt","marginTop","color","scale","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","fields","slug","rel"],"sourceRoot":""}