{"componentChunkName":"component---src-templates-blog-post-js","path":"/a-brief-introduction-to-milkdown-v7/","result":{"data":{"site":{"siteMetadata":{"title":"Disenchanted","social":{"twitter":"@mirone_saul","github":"Saul-Mirone"}}},"markdownRemark":{"id":"8ee26a26-5731-5fc3-93f4-d4431accbb22","excerpt":"It’s been almost one year since the release of milkdown V6.\nIt helped a lot of users to build their own markdown based applications.\nIt has 13k downloads per…","html":"<p>It’s been almost one year since the release of <a href=\"https://milkdown.dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">milkdown</a> V6.\nIt helped a lot of users to build their own markdown based applications.\nIt has 13k downloads per month and I feel so grateful that users like that.</p>\n<p>However, we noticed that there’re some problems cannot be resolved if we don’t make a new major version.\nWhat big changes did we made?  I’ll introduce them to you in this blog.</p>\n<h1>TL;DR</h1>\n<ul>\n<li>\n<p>The editor becomes a first-class headless component.</p>\n</li>\n<li>\n<p>Factory plugins are fully replaced by <strong>composable plugins</strong>.</p>\n</li>\n<li>\n<p>Runtime plugin toggling is supported.</p>\n</li>\n<li>\n<p>Universal widget plugins.</p>\n</li>\n<li>\n<p>Better Vue and React support.</p>\n</li>\n<li>\n<p>API documentation is provided.</p>\n</li>\n</ul>\n<h1>Why Headless?</h1>\n<p>In the past, milkdown had a lot of internal styles to make sure the editor can work out of box and the themes are easy to create.\nHowever, I found it limits the users to design their own editor.\nEven worse, if you have an well designed application,\nit is really hard to keep the style of the milkdown editor same with the rest of the application.\nYou’ll need to override lots of styles everywhere.\nIt stops a log of users from using milkdown.</p>\n<p>If we think about why users need an editor,\nthe most important thing is always the functionality of the editor.\nUsers just want a component that can provide smooth editing experience.\nStyle will always be the second thing.</p>\n<p>So, why not remove all the internal styles and make the editor a headless component?\nThe users can easily integrate the editor into their own application.\nThey can use their own styles and even use their own components to render the editor.\nWe just care about the functionality of the editor. Make sure it works well.</p>\n<h1>Composable Plugins</h1>\n<p>Although the composable plugins have been existed in milkdown for a long time,\nwe use factory plugins to create most of the official plugins in V6.</p>\n<p>But, the problem is that factory plugins limit the possibility of the plugins.\nThe factory plugins handle a bunch of complex logic and it is hard to extend.\nSo for users who want to create a plugin in a easy way, they must follow the factory plugin’s way.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> nodePlugin <span class=\"token operator\">=</span> <span class=\"token function\">createPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'node'</span><span class=\"token punctuation\">,</span>\n    schema<span class=\"token operator\">:</span> someSchema<span class=\"token punctuation\">,</span>\n    inputRules<span class=\"token operator\">:</span> someInputRules\n    commands<span class=\"token operator\">:</span> someCommands\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>See? You can define a lot of things inside the factory plugin.\nBut if you want to use some part of them in another plugin, it’s really hard to do that.</p>\n<p>However, the milkdown’s plugin system is designed to be flexible and composable.\nWe want to let users to control the data flow entirely.</p>\n<p>So, we decided to remove all the factory plugins and use composable plugins to replace them.\nThe composable plugins can keep the atomicity of the plugins and make the plugin system more flexible.\nThey also make the plugin system easier to maintain.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> nodeSchema <span class=\"token operator\">=</span> <span class=\"token function\">$node</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node'</span><span class=\"token punctuation\">,</span> someSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nodeInputRules <span class=\"token operator\">=</span> <span class=\"token function\">$inputRules</span><span class=\"token punctuation\">(</span>someInputRules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nodeCommands <span class=\"token operator\">=</span> <span class=\"token function\">$commands</span><span class=\"token punctuation\">(</span>someCommands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you want to reuse them, it also will be very easy.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> anotherCommand <span class=\"token operator\">=</span> <span class=\"token function\">$commands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token function\">setBlockType</span><span class=\"token punctuation\">(</span>nodeSchema<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Runtime Plugin Toggling</h1>\n<p>In the past, once you register a plugin, you cannot remove it.\nIn V7, we support runtime plugin toggling by providing two new API: <code class=\"language-text\">editor.remove</code> and <code class=\"language-text\">editor.removeConfig</code>.\nThey can let users remove the plugins and configs at runtime.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Editor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@milkdown/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> someMilkdownPlugin <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'some-milkdown-plugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> editor <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Editor\n  <span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span>configForPlugin<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>someMilkdownPlugin<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// remove plugin</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">await</span> editor<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>someMilkdownPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// remove config</span>\n<span class=\"gatsby-highlight-code-line\">editor<span class=\"token punctuation\">.</span><span class=\"token function\">removeConfig</span><span class=\"token punctuation\">(</span>configForPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// add another plugin</span>\neditor<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>anotherMilkdownPlugin<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Recreate the editor to apply changes.</span>\n<span class=\"token keyword\">await</span> editor<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Also, if you call the <code class=\"language-text\">editor.create</code> method after the editor is created,\nit will recreate the editor and apply all the changes.</p>\n<h1>Universal Widget Plugins</h1>\n<p>We have 4 official widget plugins in V6: <em>slash</em>, <em>tooltip</em>, <em>block</em> and <em>menu</em>.</p>\n<p>They are all well designed and easy to use.\nBut if you want to customize them, what you can do is really limited.\nAlso, it’s hard to reuse their logic even if you want to create something similar to them.\nFor example, if you want to create a mention plugin which will show a list of users when you type <code class=\"language-text\">@</code>,\nyou need to create a new plugin from scratch.</p>\n<p>So, in V7, we make <em>slash</em>, <em>tooltip</em> and <em>block</em> plugins universal.\nYou can use them to build you features easily.\nFor example, if you want to create a mention plugin, you can use the new slash plugin to do that.\nAnother example is that you can also create tooltips for different types of nodes.\nDisplay a tooltip with input when you focus on an image node, or display a tooltip with buttons when you select some text.</p>\n<p>What about the <em>menu</em> plugin? We removed it because we think it’s easy to create a menu plugin by yourself.\nWe’ve already done that in the <a href=\"https://milkdown.dev/playground\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official playground</a>.\nAnd, trust me, <a href=\"https://github.com/milkdown/website/blob/main/src/component/Playground/Milkdown/index.tsx#L57\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">it won’t need much code</a>.</p>\n<h1>Better Vue and React Support</h1>\n<p>Thanks to the <a href=\"https://github.com/Saul-Mirone/prosemirror-adapter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Saul-Mirone/prosemirror-adapter project</a>.\nIn milkdown V7. We allow users to use vue and react to render lots of parts of the editor.\nFor example, you can use them to render your own code block, drag handle or even small icons.</p>\n<ul>\n<li>React Example: <a href=\"https://stackblitz.com/github/Milkdown/examples/tree/main/react-custom-component\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://developer.stackblitz.com/img/open_in_stackblitz.svg\" alt=\"Open in StackBlitz\"></a></li>\n<li>Vue Example: <a href=\"https://stackblitz.com/github/Milkdown/examples/tree/main/vue-custom-component\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://developer.stackblitz.com/img/open_in_stackblitz.svg\" alt=\"Open in StackBlitz\"></a></li>\n</ul>\n<h1>API Documentation</h1>\n<p>What’s the hardest thing to do when maintaining an open source project?\nKeep the documentation up to date.\nThanks to the <a href=\"https://github.com/marijnh/builddocs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">marijnh/builddocs project</a>,\nwe can generate the API documentation automatically from the source code.</p>\n<p>We also redesigned the documentation website, provide a more powerful playground and lots of examples.</p>\n<p>Ready to try it? <a href=\"https://milkdown.dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://milkdown.dev</a></p>\n<p>If you like the project, please consider to give it a 🌟 on <a href=\"https://github.com/Milkdown/milkdown\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>.</p>","frontmatter":{"title":"A Brief Introduction to Milkdown v7","date":"February 22, 2023","description":"A brand new version of milkdown is coming. Let's take a look at what's new."},"fields":{"slug":"/a-brief-introduction-to-milkdown-v7/","langKey":"en"}}},"pageContext":{"slug":"/a-brief-introduction-to-milkdown-v7/","langKey":"en","translations":[],"previous":{"fields":{"slug":"/introducing-vite-book/","langKey":"en","directoryName":"introducing-vite-book"},"frontmatter":{"title":"Introducing Vite Book"}},"next":null}},"staticQueryHashes":["1284616465","2841359383"],"slicesMap":{}}