{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-essence-of-react-component/","result":{"data":{"site":{"siteMetadata":{"title":"Disenchanted","social":{"twitter":"@mirone_saul","github":"Saul-Mirone"}}},"markdownRemark":{"id":"8ad5e748-78cd-5864-b443-9d0e7e2bb6ed","excerpt":"Maybe you have used React for a long time:\nusing the elegant jsx with React hooks to create pages built up with components.\nHowever, why do we only need to…","html":"<p>Maybe you have used React for a long time:\nusing the elegant jsx with React hooks to create pages built up with components.\nHowever, why do we only need to write declarative components to let React manage itself?\nFurthermore, what are these components we write every day?</p>\n<h1>Just Functions</h1>\n<p>Consider the following code implementing a simple clock, guess what will be printed in the chrome devtools.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Text</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Text\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Just text<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>clock<span class=\"token punctuation\">,</span> setClock<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App\"</span><span class=\"token punctuation\">)</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setClock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>clock<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>clock<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The fact is that it will print <code class=\"language-text\">App</code> and <code class=\"language-text\">Text</code> together every second.</p>\n<p>React components are just functions. If you have experience in TypeScript with React project,\nyou may have met a useful type annotation: <code class=\"language-text\">React.FC</code>, which is just an acronym for <code class=\"language-text\">FunctionComponent</code>.\nThe definition of it is something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReactElement</code></pre></div>\n<p>It means that <strong>a React function component is a function receives <code class=\"language-text\">props</code> as an argument and returns a React element</strong>.</p>\n<p>JSX is just a kind of syntax sugar. In fact, it will be compiled into function calls:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      foo\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>bar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// turn into</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>During the creation of a React element,\nit will create its child elements recursively,\ngenerating an element tree in the end.</p>\n<p>So the render of a component is the same as a function call.\nThat’s why we get <code class=\"language-text\">App</code> and <code class=\"language-text\">Text</code> every second in the previous sample.\nThe state’s update of the component trigger the rerender of that component, which cause the function called.</p>\n<h1>Elements For Render</h1>\n<p>Elements are just a kind of data structure. You can regard them as objects.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// &lt;p className='hello'>Hello&lt;/p></span>\n<span class=\"token comment\">// -> turn into</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With the information like <code class=\"language-text\">type</code>, <code class=\"language-text\">key</code>, <code class=\"language-text\">props</code>, <code class=\"language-text\">children</code> on it,\nRenderers can easily transform the data structure into what it wants.\nFor example, ReactDOM transforms elements into dom elements\nand React Native transforms elements into native widgets.\nYou can even create a renderer which just prints them on your screen\nand then you get a ‘printer renderer’.</p>\n<p>When an update occurs, a new element will be generated, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// we have a update</span>\n<span class=\"token comment\">// &lt;p className='hello'>updated&lt;/p></span>\n<span class=\"token comment\">// -> turn into</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Render What</h1>\n<p>There is no magic in React to make sure elements generated between updates are the same as those generated previously.\n<strong>For every render, there is a new element tree.</strong></p>\n<p>It’s possible to create dom elements every time for every render.\nHowever, that’s a highly costly processing.\nIn fact, React use the <a href=\"https://reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reconciliation</a> to\nknow what to do exactly: regenerating the dom element or just updating some contents.</p>\n<p>As a renderer of React,\nit just needs to implement an interface for <a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reconciler</a>,\nthen Reconciler will update using the methods we provide.\nI can use the following pseudo code to describe the relationship between ReactDOM and Reconciler:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">ReactDOMRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>ReactDOMHostConfig<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">ReactDOMHostConfig</code> is exactly the interface I mentioned above.\nIt’s something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">now</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">supportsMutation</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">createInstance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> rootContainerInstance</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">createTextInstance</span><span class=\"token operator\">:</span> <span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">appendInitialChild</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentInstance<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We could probably know what each method should deal with by the method name.\n<a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The full list of methods is here</a>.\nFor further information, <a href=\"https://medium.com/@agent_hunt/hello-world-custom-react-renderer-9a95b7cd04bc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here is a good post to read</a>.</p>\n<h1>In Closing</h1>\n<p>Now, let’s conclude what happens during a React update:</p>\n<ol>\n<li>Trigger an update for the target component. (It can be the first render, props or state update, and so on.)</li>\n<li>Call components as functions. (Or render method of class components.)</li>\n<li>Generate an element tree.</li>\n<li>Find what to update by Reconciliation .</li>\n<li>Call methods provided by react renderer to commit the update.</li>\n</ol>\n<p>If components have a high cost every render,\nYou may need to use something like <a href=\"https://reactjs.org/docs/react-api.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React.memo</a> to avoid unnecessary calculation.\nAt least for now we know exactly why we need this and other things like <code class=\"language-text\">React.useMemo</code> or <code class=\"language-text\">React.useCallback</code>,\nand why functions in React hook’s dependency lists can cause infinite execution.</p>\n<p>If this post is really helpful to you,\nI highly recommend you to read Dan Abramov’s great post ”<a href=\"https://overreacted.io/react-as-a-ui-runtime/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React as a UI Runtime</a>“.</p>","frontmatter":{"title":"The Essence of React Component","date":"April 24, 2020","description":"Render forever."},"fields":{"slug":"/the-essence-of-react-component/","langKey":"en"}}},"pageContext":{"slug":"/the-essence-of-react-component/","langKey":"en","translations":["zh-hans"],"previous":null,"next":{"fields":{"slug":"/performance-optimization-in-react-context/","langKey":"en","directoryName":"performance-optimization-in-react-context"},"frontmatter":{"title":"Performance Optimization in React Context"}}}},"staticQueryHashes":["1284616465","2841359383"],"slicesMap":{}}