{"componentChunkName":"component---src-templates-blog-post-js","path":"/zh-hans/a-complete-guide-to-typescript-decorator/","result":{"data":{"site":{"siteMetadata":{"title":"Disenchanted"}},"markdownRemark":{"id":"d0418108-697e-5e4d-8561-d86a176a5fdd","excerpt":"装饰器让TypeScript的世界更好。\n我们使用的许多库都基于这一强大特性构建,\n例如Angular和Nestjs…","html":"<p>装饰器让TypeScript的世界更好。\n我们使用的许多库都基于这一强大特性构建,\n例如<a href=\"https://angular.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Angular</a>和<a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nestjs</a>。\n在这篇博客中我将介绍装饰器和它的许多细节。\n我希望在读完这篇文章后，你可以理解何时和如何使用这一强的的特性。</p>\n<h1>概览</h1>\n<p>装饰器本质上是一种特殊的函数被应用在于：</p>\n<ol>\n<li>类</li>\n<li>类属性</li>\n<li>类方法</li>\n<li>类访问器</li>\n<li>类方法的参数</li>\n</ol>\n<p>所以应用装饰器其实很像是组合一系列函数，类似于高阶函数和类。\n通过装饰器我们可以轻松实现<a href=\"https://zh.wikipedia.org/zh-hans/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">代理模式</a>来使代码更简洁以及实现其它一些更有趣的能力。</p>\n<p>装饰器的语法十分简单，只需要在想使用的装饰器前加上<code class=\"language-text\">@</code>符号，装饰器就会被应用到目标上：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">simpleDecorator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---hi I am a decorator---'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">simpleDecorator</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>一共有5种装饰器可被我们使用：</p>\n<ol>\n<li>类装饰器</li>\n<li>属性装饰器</li>\n<li>方法装饰器</li>\n<li>访问器装饰器</li>\n<li>参数装饰器</li>\n</ol>\n<p>让我们来快速认识一下这五种装饰器：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 类装饰器</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">classDecorator</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 属性装饰器</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">propertyDecorator</span></span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// 方法装饰器</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">methodDecorator</span></span>\n  <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 参数装饰器</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">parameterDecorator</span></span>\n      meters<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// 访问器装饰器</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">accessorDecorator</span></span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">egg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>执行</h1>\n<h2>时机</h2>\n<p>装饰器只在解释执行时应用一次，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apply decorator'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">C</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// output: apply decorator</span></code></pre></div>\n<p>这里的代码会在终端中打印<code class=\"language-text\">apply decorator</code>，即便我们其实并没有使用类A。</p>\n<h2>执行顺序</h2>\n<p>不同类型的装饰器的执行顺序是明确定义的：</p>\n<ol>\n<li>实例成员：</li>\n</ol>\n<p>参数装饰器 -> 方法 / 访问器 / 属性 装饰器\n2. 静态成员:<br>\n参数装饰器 -> 方法 / 访问器 / 属性 装饰器\n3. 构造器: 参数装饰器\n4. 类装饰器</p>\n<p>例如，考虑以下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evaluate: \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call: \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class Decorator\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Static Property\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">static</span> prop<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Static Method\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Static Method Parameter\"</span><span class=\"token punctuation\">)</span> foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Constructor Parameter\"</span><span class=\"token punctuation\">)</span> foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Instance Method\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Instance Method Parameter\"</span><span class=\"token punctuation\">)</span> foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Instance Property\"</span><span class=\"token punctuation\">)</span>\n  prop<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>它将会打印出以下信息：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">evaluate:  Instance Method\nevaluate:  Instance Method Parameter\ncall:  Instance Method Parameter\ncall:  Instance Method\nevaluate:  Instance Property\ncall:  Instance Property\nevaluate:  Static Property\ncall:  Static Property\nevaluate:  Static Method\nevaluate:  Static Method Parameter\ncall:  Static Method Parameter\ncall:  Static Method\nevaluate:  Class Decorator\nevaluate:  Constructor Parameter\ncall:  Constructor Parameter\ncall:  Class Decorator</code></pre></div>\n<p>你也许会注意到执行实例属性<code class=\"language-text\">prop</code>晚于实例方法<code class=\"language-text\">method</code>\n然而执行静态属性<code class=\"language-text\">static prop</code>早于静态方法<code class=\"language-text\">static method</code>。\n这是因为对于属性/方法/访问器装饰器而言，执行顺序取决于声明它们的顺序。</p>\n<p>然而，同一方法中不同参数的装饰器的执行顺序是相反的，\n最后一个参数的装饰器会最先被执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evaluate: \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call: \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parameter Foo\"</span><span class=\"token punctuation\">)</span> foo<span class=\"token punctuation\">,</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parameter Bar\"</span><span class=\"token punctuation\">)</span> bar\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的代码打印出的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">evaluate:  Parameter Foo\nevaluate:  Parameter Bar\ncall:  Parameter Bar\ncall:  Parameter Foo</code></pre></div>\n<h2>多个装饰器的组合</h2>\n<p>你可以对同一目标应用多个装饰器。它们的组合顺序为：</p>\n<ol>\n<li>求值外层装饰器</li>\n<li>求值内层装饰器</li>\n<li>调用内层装饰器</li>\n<li>调用外层装饰器</li>\n</ol>\n<p>例如:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evaluate: \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call: \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outer Method\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">f</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inner Method\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的代码打印出的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">evaluate: Outer Method\nevaluate: Inner Method\ncall: Inner Method\ncall: Outer Method</code></pre></div>\n<h1>定义</h1>\n<h2>类装饰器</h2>\n<p>类型声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ClassDecorator</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>TFunction <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Function</span></span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> TFunction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> TFunction <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>@参数:\n<ol>\n<li><code class=\"language-text\">target</code>: 类的构造器。</li>\n</ol>\n</li>\n<li>@返回:<br>\n如果类装饰器返回了一个值，她将会被用来代替原有的类构造器的声明。</li>\n</ul>\n<p>因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。</p>\n<p>例如我们可以添加一个<code class=\"language-text\">toString</code>方法给所有的类来覆盖它原有的<code class=\"language-text\">toString</code>方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Consturctor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">toString</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Consturctor<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>BaseClass<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token keyword\">extends</span></span> BaseClass <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">toString</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> num <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> {\"foo\":\"foo\",\"num\":24}</span></code></pre></div>\n<p>遗憾的是装饰器并没有类型保护，这意味着：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">Blah</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Blah</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Property 'foo' does not exist on type 'Foo'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Property 'foo' does not exist on type 'Foo'</span></code></pre></div>\n<p>这是<a href=\"https://github.com/microsoft/TypeScript/issues/4881\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一个TypeScript的已知的缺陷</a>。\n目前我们能做的只有额外提供一个类用于提供类型信息：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">Blah</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Blah</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>属性装饰器</h2>\n<p>类型声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PropertyDecorator</span> <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span> propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>@参数:\n<ol>\n<li><code class=\"language-text\">target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code class=\"language-text\">propertyKey</code>: 属性的名称。</li>\n</ol>\n</li>\n<li>@返回:<br>\n返回的结果将被忽略。</li>\n</ul>\n<p>除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。\n例如我们可以写一个装饰器来给某些属性添加监听器。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">capitalizeFirstLetter</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// prop -> onPropChange</span>\n  <span class=\"token keyword\">const</span> targetKey <span class=\"token operator\">=</span> <span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">capitalizeFirstLetter</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Change\"</span><span class=\"token punctuation\">;</span>\n\n  target<span class=\"token punctuation\">[</span>targetKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>prev<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          prev <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">observable</span></span>\n  foo <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">observable</span></span>\n  bar <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nc<span class=\"token punctuation\">.</span><span class=\"token function\">onFooChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">prev: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prev<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, next: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>next<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">onBarChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">prev: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prev<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, next: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>next<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nc<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> prev: -1, next: 100</span>\nc<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> prev: 100, next: -3.14</span>\nc<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> prev: bar, next: baz</span>\nc<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">\"sing\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> prev: baz, next: sing</span></code></pre></div>\n<h2>方法装饰器</h2>\n<p>类型声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MethodDecorator</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  target<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n  propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">,</span>\n  descriptor<span class=\"token operator\">:</span> TypedPropertyDescriptor<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> TypedPropertyDescriptor<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>@参数：\n<ol>\n<li><code class=\"language-text\">target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code class=\"language-text\">propertyKey</code>: 属性的名称。</li>\n<li><code class=\"language-text\">descriptor</code>: 属性的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">描述器</a>。</li>\n</ol>\n</li>\n<li>@返回：\n如果返回了值，它会被用于替代属性的描述器。</li>\n</ul>\n<p>方法装饰器不同于属性装饰器的地方在于<code class=\"language-text\">descriptor</code>参数。\n通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。\n例如我们可以给一些方法添加打印输入与输出的能力：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n  descriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'params: '</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">original</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">logger</span></span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -> params: 1, 2</span>\n<span class=\"token comment\">// -> result: 3</span></code></pre></div>\n<h2>访问器装饰器</h2>\n<p>访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的key不同：</p>\n<p>方法装饰器的描述器的key为：</p>\n<ul>\n<li><code class=\"language-text\">value</code></li>\n<li><code class=\"language-text\">writable</code></li>\n<li><code class=\"language-text\">enumerable</code></li>\n<li><code class=\"language-text\">configurable</code></li>\n</ul>\n<p>访问器装饰器的描述器的key为：</p>\n<ul>\n<li><code class=\"language-text\">get</code></li>\n<li><code class=\"language-text\">set</code></li>\n<li><code class=\"language-text\">enumerable</code></li>\n<li><code class=\"language-text\">configurable</code></li>\n</ul>\n<p>例如，我们可以将某个属性设为不可变值：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">immutable</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">;</span>\n\n  descriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">original</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> _point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">immutable</span></span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_point <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\nc<span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>point <span class=\"token operator\">===</span> point<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> false</span></code></pre></div>\n<h2>参数装饰器</h2>\n<p>类型声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ParameterDecorator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  target<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n  propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">,</span>\n  parameterIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>@参数：\n<ol>\n<li><code class=\"language-text\">target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code class=\"language-text\">propertyKey</code>: 属性的名称(注意是方法的名称，而不是参数的名称)。</li>\n<li><code class=\"language-text\">parameterIndex</code>: 参数在方法中所处的位置的下标。</li>\n</ol>\n</li>\n<li>@返回：<br>\n返回的值将会被忽略。</li>\n</ul>\n<p>单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。</p>\n<h1>结合</h1>\n<p>对于一些复杂场景，\n我们可能需要结合使用不同的装饰器。\n例如如果我们不仅想给我们的接口添加静态检查，还想加上运行时检查的能力。</p>\n<p>我们可以用3个步骤来实现这个功能：</p>\n<ol>\n<li>标记需要检查的参数 (因为参数装饰器先于方法装饰器执行)。</li>\n<li>改变方法的<code class=\"language-text\">descriptor</code>的<code class=\"language-text\">value</code>的值，先运行参数检查器，如果失败就抛出异常。</li>\n<li>运行原有的接口实现。</li>\n</ol>\n<p>以下是代码:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Validator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// save the marks</span>\n<span class=\"token keyword\">const</span> validateMap<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> Validator<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 标记需要检查的参数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">typedDecoratorFactory</span><span class=\"token punctuation\">(</span>validator<span class=\"token operator\">:</span> Validator<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ParameterDecorator <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> validateMap<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">;</span>\n    validateMap<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>_<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> originalFn <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  descriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 2. 运行检查器</span>\n    <span class=\"token keyword\">const</span> validatorList <span class=\"token operator\">=</span> validateMap<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validatorList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      args<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> validator <span class=\"token operator\">=</span> validatorList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validator<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">validator</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed for parameter: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> of the index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 3. 运行原有的方法</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">originalFn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> isInt <span class=\"token operator\">=</span> <span class=\"token function\">typedDecoratorFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token function\">typedDecoratorFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">validate</span></span>\n  <span class=\"token function\">sayRepeat</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">isString</span></span> word<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">isInt</span></span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">sayRepeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pass</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">sayRepeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lol'</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw an error</span></code></pre></div>\n<p>正如例子中展示的，\n对我们来说同时理解不同种类装饰器的执行顺序和职责都很重要。</p>\n<h1>元数据</h1>\n<p>严格地说，元数据和装饰器是EcmaScript中两个独立的部分。\n然而，如果你想实现像是<a href=\"https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">反射</a>这样的能力，你总是同时需要它们。</p>\n<p>如果我们回顾上一个例子，如果我们不想写各种不同的检查器呢？\n或者说，能否只写一个检查器能够通过我们编写的TS类型声明来自动运行类型检查？</p>\n<p>有了<a href=\"https://github.com/rbuckton/reflect-metadata\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reflect-metadata</a>的帮助，\n我们可以获取编译期的类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>\n  target<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  descriptor<span class=\"token operator\">:</span> PropertyDescriptor\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> originalFn <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 获取参数的编译期类型</span>\n  <span class=\"token keyword\">const</span> designParamTypes <span class=\"token operator\">=</span> Reflect\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'design:paramtypes'</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  descriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    args<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">const</span> paramType <span class=\"token operator\">=</span> designParamTypes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> paramType\n        <span class=\"token operator\">||</span> arg <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">paramType</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed for validating parameter: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> of the index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">originalFn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">validate</span></span>\n  <span class=\"token function\">sayRepeat</span><span class=\"token punctuation\">(</span>word<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">sayRepeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pass</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">sayRepeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lol'</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw an error</span></code></pre></div>\n<p>目前为止一共有三种编译期类型可以拿到：</p>\n<ul>\n<li><code class=\"language-text\">design:type</code>: 属性的类型。</li>\n<li><code class=\"language-text\">desin:paramtypes</code>: 方法的参数的类型。</li>\n<li><code class=\"language-text\">design:returntype</code>: 方法的返回值的类型。</li>\n</ul>\n<p>这三种方式拿到的结果都是构造函数（例如<code class=\"language-text\">String</code>和<code class=\"language-text\">Number</code>）。规则是：</p>\n<ul>\n<li>number -> <code class=\"language-text\">Number</code></li>\n<li>string -> <code class=\"language-text\">String</code></li>\n<li>boolean -> <code class=\"language-text\">Boolean</code></li>\n<li>void/null/never -> <code class=\"language-text\">undefined</code></li>\n<li>Array/Tuple -> <code class=\"language-text\">Array</code></li>\n<li>Class -> 类的构造函数</li>\n<li>Enum -> 如果是纯数字枚举则为<code class=\"language-text\">Number</code>, 否则是 <code class=\"language-text\">Object</code></li>\n<li>Function -> <code class=\"language-text\">Function</code></li>\n<li>其余都是<code class=\"language-text\">Object</code></li>\n</ul>\n<h1>何时使用？</h1>\n<p>现在我们可以对于何时使用装饰器得出结论，\n在阅读上面的代码中你可能也有所感觉。</p>\n<p>我将例举一些常用的使用场景：</p>\n<ul>\n<li>Before/After钩子。</li>\n<li>监听属性改变或者方法调用。</li>\n<li>对方法的参数做转换。</li>\n<li>添加额外的方法和属性。</li>\n<li>运行时类型检查。</li>\n<li>自动编解码。</li>\n<li>依赖注入。</li>\n</ul>\n<p>我希望读完这篇文章后，你可以找到装饰器的更多使用场景，并且用它来简化你的代码。</p>","frontmatter":{"title":"TypeScript装饰器完全指南","date":"October 13, 2020","description":"用装饰器简化你的代码。"},"fields":{"slug":"/zh-hans/a-complete-guide-to-typescript-decorator/","langKey":"zh-hans"}}},"pageContext":{"langKey":"zh-hans","slug":"/zh-hans/a-complete-guide-to-typescript-decorator/"}},"staticQueryHashes":["2841359383","4268877247"],"slicesMap":{}}