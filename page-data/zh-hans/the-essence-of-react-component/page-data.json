{"componentChunkName":"component---src-templates-blog-post-js","path":"/zh-hans/the-essence-of-react-component/","result":{"data":{"site":{"siteMetadata":{"title":"Disenchanted","social":{"twitter":"@mirone_saul","github":"Saul-Mirone"}}},"markdownRemark":{"id":"a55be556-b789-5e74-906c-b5dfbc3125b5","excerpt":"也许你已经使用React很长时间了，你使用优雅的jsx语法和React hooks来构建组件，最终构成页面。\n然而，为什么我们只需要编写一些声明式的组件，React就可以管理它自己？\n进一步而言，我们每天编写的组件到底是什么？ 只是函数 考虑以下代码，它实现了一个简单的时钟，猜猜最终打印在chrome…","html":"<p>也许你已经使用React很长时间了，你使用优雅的jsx语法和React hooks来构建组件，最终构成页面。\n然而，为什么我们只需要编写一些声明式的组件，React就可以管理它自己？\n进一步而言，我们每天编写的组件到底是什么？</p>\n<h1>只是函数</h1>\n<p>考虑以下代码，它实现了一个简单的时钟，猜猜最终打印在chrome控制台中的是什么？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Text</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Text\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Just text<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>clock<span class=\"token punctuation\">,</span> setClock<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App\"</span><span class=\"token punctuation\">)</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setClock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>clock<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>clock<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>事实是每秒，控制台中都会将<code class=\"language-text\">App</code>和<code class=\"language-text\">Text</code>一起打印出来。</p>\n<p>React组件只是函数。如果你在React项目中使用过TypeScript的话，\n你可能已经遇见过一个类型：<code class=\"language-text\">React.FC</code>，它是<code class=\"language-text\">FunctionComponent</code>的缩写,\n定义如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReactElement</code></pre></div>\n<p>这意味着<strong>一个React函数组件代表一个函数，它接受<code class=\"language-text\">props</code>作为参数并最终返回一个React元素</strong>。</p>\n<p>JSX本质上是一种语法糖，它将被编译为一些函数调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      foo\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>bar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 编译为</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在React元素的创建过程中，\n他将递归地创建所有的子元素，\n最终生成一颗元素树。</p>\n<p>所以一个组件的渲染过程其实就是一次函数调用。\n这就是为什么在前面的例子中我们每一秒都会得到<code class=\"language-text\">App</code>和<code class=\"language-text\">Text</code>。\n组件状态的更新导致了组件的重新渲染，触发了函数调用。</p>\n<h1>用于渲染的元素</h1>\n<p>元素其实只是一种数据结构，你可以把它们看作对象，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// &lt;p className='hello'>Hello&lt;/p></span>\n<span class=\"token comment\">// -> 转换为</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>渲染器(Renderer)可以通过React元素上携带的信息，\n例如<code class=\"language-text\">type</code>, <code class=\"language-text\">key</code>, <code class=\"language-text\">props</code>, <code class=\"language-text\">children</code>来轻松的将这种数据结构转换为它需要的形式。\n例如ReactDOM将React元素转换为dom元素，React Native将React元素转换为原生控件。\n你甚至可以直接把元素打印在屏幕上，这样你就创造了一个”打印渲染器”。</p>\n<p>当更新发生的时候，一个新元素会被生成，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// we have a update</span>\n<span class=\"token comment\">// &lt;p className='hello'>updated&lt;/p></span>\n<span class=\"token comment\">// -> 转换为</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>渲染什么</h1>\n<p>在React中，并没有什么魔法来保证每次渲染得到的元素都是同一个对象。\n事实上，<strong>每次渲染都会得到一颗新的元素树</strong>。</p>\n<p>所以其实为每次渲染都创建一颗新的dom树也是可能的，\n然而这样会有巨大的开销。\n事实上，React使用一种叫做<a href=\"https://reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reconciliation</a>的算法\n来让自己知道具体应该做什么：是重新生成dom元素，还是在现有内容上做一些更新。</p>\n<p>一个React的渲染器只需要实现一个供\n<a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reconciler</a>调用的接口，\nReconciler就可以使用它提供的方法来更新。\n我将使用以下的伪代码来描述ReactDOM和Reconciler的关系：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">ReactDOMRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>ReactDOMHostConfig<span class=\"token punctuation\">)</span></code></pre></div>\n<p>代码中的<code class=\"language-text\">ReactDOMHostConfig</code>正是我之前提到的接口，\n它有如下结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">now</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">supportsMutation</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">createInstance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> rootContainerInstance</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">createTextInstance</span><span class=\"token operator\">:</span> <span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">appendInitialChild</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentInstance<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以通过方法的命名来大概得知每个方法是用来处理什么工作。\n<a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整的方法列表可以在这里查看</a>。\n如果想要知道更多关于React Renderer的知识, <a href=\"https://medium.com/@agent_hunt/hello-world-custom-react-renderer-9a95b7cd04bc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里有一篇很好的博客推荐阅读</a>。</p>\n<h1>总结</h1>\n<p>现在，让我们总结一下React一次更新时都发生了什么：</p>\n<ol>\n<li>对目标组件触发更新。（可能来源于初次渲染，props或state更新之类的情况。）</li>\n<li>像函数一样调用组件。 (对于类组件，调用的是<code class=\"language-text\">render</code>方法。)</li>\n<li>生成一颗元素树。</li>\n<li>通过Reconciliation算法计算出具体要更新什么内容。</li>\n<li>调用渲染器提供的方法来执行更新。</li>\n</ol>\n<p>如果一个组件每次渲染时都有高额的开销。\n你也许需要类似于<a href=\"https://reactjs.org/docs/react-api.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React.memo</a>来避免不必要的计算。\n至少现在我们确切的知道了为什么我们需要它以及其它诸如<code class=\"language-text\">React.useMemo</code>或是<code class=\"language-text\">React.useCallback</code>的方法,\n也知道了为什么有时候将函数放在React hooks的依赖列表里会引起无限执行。</p>\n<p>如果这篇博客有所帮助，\n我强烈推荐您阅读Dan Abramov的很棒的博客”<a href=\"https://overreacted.io/zh-hans/react-as-a-ui-runtime/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">将React作为UI运行时</a>“。</p>","frontmatter":{"title":"React组件的本质","date":"April 24, 2020","description":"永远渲染。"},"fields":{"slug":"/zh-hans/the-essence-of-react-component/","langKey":"zh-hans"}}},"pageContext":{"langKey":"zh-hans","slug":"/zh-hans/the-essence-of-react-component/"}},"staticQueryHashes":["1284616465","2841359383"],"slicesMap":{}}